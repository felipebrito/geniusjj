/*
 * ESP32 Relay Control para Genius Game
 * Controla 6 rel√©s baseado em comandos seriais
 * 
 * Portas dos rel√©s:
 * D4  -> Rel√© 1 (Bot√£o 0)
 * D16 -> Rel√© 2 (Bot√£o 1) 
 * D17 -> Rel√© 3 (Bot√£o 2)
 * D5  -> Rel√© 4 (Bot√£o 3)
 * D18 -> Rel√© 5 (Bot√£o 4)
 * D19 -> Rel√© 6 (Bot√£o 5)
 * 
 * Comandos:
 * 10, 20, 30, 40, 50, 60 -> Desliga rel√©s 1-6
 * 11, 21, 31, 41, 51, 61 -> Liga rel√©s 1-6
 */

// Defini√ß√£o das portas dos rel√©s
const int RELAY_PINS[] = {4, 16, 17, 5, 18, 19};
const int NUM_RELAYS = 6;

// Estados dos rel√©s (false = desligado, true = ligado)
bool relayStates[NUM_RELAYS] = {false, false, false, false, false, false};

// Buffer para comandos seriais
String serialBuffer = "";

void setup() {
  // Inicializar comunica√ß√£o serial
  Serial.begin(115200);
  Serial.println("ESP32 Relay Control - Genius Game");
  Serial.println("Aguardando comandos...");
  
  // Configurar portas dos rel√©s como sa√≠da
  for (int i = 0; i < NUM_RELAYS; i++) {
    pinMode(RELAY_PINS[i], OUTPUT);
    digitalWrite(RELAY_PINS[i], HIGH); // HIGH = rel√© desligado (l√≥gica invertida)
    Serial.printf("Rel√© %d configurado na porta D%d\n", i + 1, RELAY_PINS[i]);
  }
  
  Serial.println("Sistema pronto!");
  Serial.println("Comandos: 10-60 (desligar), 11-61 (ligar)");
  Serial.println("Exemplo: 11 liga rel√© 1, 20 desliga rel√© 2");
}

void loop() {
  // Verificar se h√° dados dispon√≠veis na serial
  if (Serial.available()) {
    char c = Serial.read();
    
    // Adicionar caractere ao buffer
    if (c >= '0' && c <= '9') {
      serialBuffer += c;
    }
    
    // Processar comando quando buffer tem 2 d√≠gitos
    if (serialBuffer.length() == 2) {
      processCommand(serialBuffer);
      serialBuffer = ""; // Limpar buffer
    }
  }
  
  // Pequeno delay para estabilidade
  delay(10);
}

void processCommand(String command) {
  int relayIndex = (command.charAt(0) - '0') - 1; // Converter primeiro d√≠gito para √≠ndice (0-5)
  int action = command.charAt(1) - '0'; // Converter segundo d√≠gito para a√ß√£o (0=desligar, 1=ligar)
  
  // Validar √≠ndice do rel√©
  if (relayIndex < 0 || relayIndex >= NUM_RELAYS) {
    Serial.printf("ERRO: Rel√© %d n√£o existe (v√°lido: 1-6)\n", relayIndex + 1);
    return;
  }
  
  // Validar a√ß√£o
  if (action != 0 && action != 1) {
    Serial.printf("ERRO: A√ß√£o %d inv√°lida (0=desligar, 1=ligar)\n", action);
    return;
  }
  
  // Executar comando
  if (action == 1) {
    // Ligar rel√©
    digitalWrite(RELAY_PINS[relayIndex], LOW); // LOW = rel√© ligado (l√≥gica invertida)
    relayStates[relayIndex] = true;
    Serial.printf("‚úÖ Rel√© %d LIGADO (porta D%d)\n", relayIndex + 1, RELAY_PINS[relayIndex]);
  } else {
    // Desligar rel√©
    digitalWrite(RELAY_PINS[relayIndex], HIGH); // HIGH = rel√© desligado (l√≥gica invertida)
    relayStates[relayIndex] = false;
    Serial.printf("‚ùå Rel√© %d DESLIGADO (porta D%d)\n", relayIndex + 1, RELAY_PINS[relayIndex]);
  }
  
  // Mostrar status atual
  showStatus();
}

void showStatus() {
  Serial.println("üìä Status dos Rel√©s:");
  for (int i = 0; i < NUM_RELAYS; i++) {
    String status = relayStates[i] ? "LIGADO" : "DESLIGADO";
    Serial.printf("  Rel√© %d (D%d): %s\n", i + 1, RELAY_PINS[i], status.c_str());
  }
  Serial.println("---");
}

// Fun√ß√£o para ligar todos os rel√©s (teste)
void turnAllOn() {
  Serial.println("üî¥ Ligando todos os rel√©s...");
  for (int i = 0; i < NUM_RELAYS; i++) {
    digitalWrite(RELAY_PINS[i], LOW);
    relayStates[i] = true;
  }
  showStatus();
}

// Fun√ß√£o para desligar todos os rel√©s (teste)
void turnAllOff() {
  Serial.println("‚ö´ Desligando todos os rel√©s...");
  for (int i = 0; i < NUM_RELAYS; i++) {
    digitalWrite(RELAY_PINS[i], HIGH);
    relayStates[i] = false;
  }
  showStatus();
}

// Fun√ß√£o para teste sequencial
void testSequence() {
  Serial.println("üéÆ Teste sequencial dos rel√©s...");
  
  // Ligar um por vez
  for (int i = 0; i < NUM_RELAYS; i++) {
    Serial.printf("Testando rel√© %d...\n", i + 1);
    digitalWrite(RELAY_PINS[i], LOW);
    delay(500);
    digitalWrite(RELAY_PINS[i], HIGH);
    delay(200);
  }
  
  Serial.println("Teste sequencial conclu√≠do!");
}
