class GamepadConfigurator {
    constructor() {
        this.gamepad = null;
        this.gamepadPollingInterval = null;
        this.gamepadButtonStates = [];
        this.mapping = {};
        this.currentMappingButton = null;
        this.isMapping = false;
        this.mappingTimeout = null;
        
        this.debugLog('üîß Configurador de Gamepad inicializado', 'info');
        
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.detectGamepad();
        this.loadExistingMapping();
        this.startGamepadPolling();
        
        this.debugLog('‚úÖ Sistema inicializado com sucesso', 'success');
    }
    
    bindEvents() {
        // Bot√µes do jogo
        document.querySelectorAll('.game-button').forEach(button => {
            button.addEventListener('click', () => {
                const colorNumber = parseInt(button.dataset.color);
                const colorName = button.dataset.name;
                this.startMapping(colorNumber, colorName);
            });
        });
        
        // Bot√µes de controle
        document.getElementById('testBtn').addEventListener('click', () => {
            this.testMapping();
        });
        
        document.getElementById('saveBtn').addEventListener('click', () => {
            this.saveMapping();
        });
        
        document.getElementById('resetBtn').addEventListener('click', () => {
            this.resetMapping();
        });
        
        // Detectar conex√£o/desconex√£o de gamepad
        window.addEventListener('gamepadconnected', (e) => {
            this.debugLog(`üéÆ Gamepad conectado: ${e.gamepad.id}`, 'success');
            this.gamepad = e.gamepad;
            this.updateGamepadStatus();
        });
        
        window.addEventListener('gamepaddisconnected', (e) => {
            this.debugLog(`üéÆ Gamepad desconectado: ${e.gamepad.id}`, 'warning');
            this.gamepad = null;
            this.updateGamepadStatus();
        });
    }
    
    detectGamepad() {
        const gamepads = navigator.getGamepads();
        if (gamepads[0]) {
            this.gamepad = gamepads[0];
            this.debugLog(`üéÆ Gamepad detectado: ${this.gamepad.id}`, 'success');
            this.debugLog(`üéÆ Bot√µes dispon√≠veis: ${this.gamepad.buttons.length}`, 'info');
        } else {
            this.debugLog('üéÆ Nenhum gamepad detectado', 'warning');
        }
        this.updateGamepadStatus();
    }
    
    startGamepadPolling() {
        if (this.gamepadPollingInterval) return;
        
        this.gamepadPollingInterval = setInterval(() => {
            this.pollGamepad();
        }, 50); // 20 FPS para responsividade
        
        this.debugLog('üîÑ Polling do gamepad iniciado', 'info');
    }
    
    pollGamepad() {
        if (!this.gamepad) return;
        
        // Atualizar refer√™ncia do gamepad
        const gamepads = navigator.getGamepads();
        this.gamepad = gamepads[this.gamepad.index] || null;
        
        if (!this.gamepad) return;
        
        // Inicializar array de estados se necess√°rio
        if (this.gamepadButtonStates.length === 0) {
            this.gamepadButtonStates = new Array(this.gamepad.buttons.length).fill(false);
        }
        
        // Verificar bot√µes pressionados
        for (let i = 0; i < this.gamepad.buttons.length; i++) {
            const button = this.gamepad.buttons[i];
            const isPressed = button && button.pressed;
            const wasPressed = this.gamepadButtonStates[i];
            
            // Detectar pressionamento (edge-triggered)
            if (isPressed && !wasPressed) {
                this.gamepadButtonStates[i] = true;
                this.handleGamepadButtonPress(i);
            } else if (!isPressed && wasPressed) {
                this.gamepadButtonStates[i] = false;
            }
        }
    }
    
    handleGamepadButtonPress(gamepadButtonIndex) {
        this.debugLog(`üéÆ Bot√£o ${gamepadButtonIndex} pressionado no gamepad`, 'info');
        
        if (this.isMapping && this.currentMappingButton) {
            // Verificar se este bot√£o j√° foi mapeado
            const alreadyMapped = Object.values(this.mapping).includes(gamepadButtonIndex);
            if (alreadyMapped) {
                this.showStatus(`‚ùå Bot√£o ${gamepadButtonIndex} j√° foi mapeado! Use outro bot√£o.`, 'error');
                this.debugLog(`‚ùå Tentativa de mapear bot√£o ${gamepadButtonIndex} que j√° est√° em uso`, 'error');
                return;
            }
            
            // Mapear bot√£o
            this.mapping[this.currentMappingButton] = gamepadButtonIndex;
            this.updateButtonDisplay(this.currentMappingButton);
            this.showStatus(`‚úÖ ${this.getColorName(this.currentMappingButton)} mapeado para bot√£o ${gamepadButtonIndex}`, 'success');
            this.debugLog(`‚úÖ ${this.getColorName(this.currentMappingButton)} (${this.currentMappingButton}) ‚Üí Gamepad bot√£o ${gamepadButtonIndex}`, 'success');
            
            // Parar mapeamento
            this.stopMapping();
            
            // Verificar se todos os bot√µes foram mapeados
            if (Object.keys(this.mapping).length === 6) {
                this.showStatus('üéâ Todos os bot√µes foram mapeados! Voc√™ pode testar e salvar.', 'success');
                this.debugLog('üéâ Mapeamento completo - todos os 6 bot√µes configurados', 'success');
                document.getElementById('testBtn').disabled = false;
                document.getElementById('saveBtn').disabled = false;
            }
        } else {
            this.debugLog(`üéÆ Bot√£o ${gamepadButtonIndex} pressionado (n√£o em modo de mapeamento)`, 'info');
        }
    }
    
    startMapping(colorNumber, colorName) {
        if (!this.gamepad) {
            this.showStatus('‚ùå Nenhum gamepad detectado! Conecte um gamepad primeiro.', 'error');
            this.debugLog('‚ùå Tentativa de mapear sem gamepad conectado', 'error');
            return;
        }
        
        this.currentMappingButton = colorNumber;
        this.isMapping = true;
        
        // Atualizar UI
        document.querySelectorAll('.game-button').forEach(btn => {
            btn.classList.remove('mapping');
        });
        
        const buttonElement = document.querySelector(`[data-color="${colorNumber}"]`);
        buttonElement.classList.add('mapping');
        
        this.showStatus(`üéØ Mapeando ${colorName}... Pressione um bot√£o no seu gamepad`, 'info');
        this.debugLog(`üéØ Iniciando mapeamento para ${colorName} (${colorNumber})`, 'info');
        
        // Timeout para cancelar mapeamento
        this.mappingTimeout = setTimeout(() => {
            this.stopMapping();
            this.showStatus('‚è∞ Tempo esgotado. Clique no bot√£o novamente para tentar.', 'warning');
            this.debugLog('‚è∞ Timeout no mapeamento', 'warning');
        }, 10000); // 10 segundos
    }
    
    stopMapping() {
        this.isMapping = false;
        this.currentMappingButton = null;
        
        // Remover classe de mapeamento
        document.querySelectorAll('.game-button').forEach(btn => {
            btn.classList.remove('mapping');
        });
        
        // Limpar timeout
        if (this.mappingTimeout) {
            clearTimeout(this.mappingTimeout);
            this.mappingTimeout = null;
        }
    }
    
    updateButtonDisplay(colorNumber) {
        const buttonElement = document.querySelector(`[data-color="${colorNumber}"]`);
        const mappedInfo = document.getElementById(`mapped-${colorNumber}`);
        
        if (this.mapping[colorNumber] !== undefined) {
            const gamepadButton = this.mapping[colorNumber];
            mappedInfo.textContent = `Mapeado: Bot√£o ${gamepadButton}`;
            mappedInfo.classList.add('mapped');
            buttonElement.classList.add('mapped');
            buttonElement.classList.remove('mapping');
        } else {
            mappedInfo.textContent = 'N√£o mapeado';
            mappedInfo.classList.remove('mapped');
            buttonElement.classList.remove('mapped');
        }
    }
    
    updateGamepadStatus() {
        const statusElement = document.getElementById('gamepadStatus');
        const statusText = document.getElementById('gamepadStatusText');
        
        if (this.gamepad) {
            statusElement.className = 'gamepad-status connected';
            statusText.textContent = `Conectado: ${this.gamepad.id}`;
        } else {
            statusElement.className = 'gamepad-status disconnected';
            statusText.textContent = 'Nenhum gamepad detectado';
        }
    }
    
    testMapping() {
        if (Object.keys(this.mapping).length !== 6) {
            this.showStatus('‚ùå Mapeie todos os 6 bot√µes antes de testar!', 'error');
            this.debugLog('‚ùå Tentativa de testar mapeamento incompleto', 'error');
            return;
        }
        
        this.showStatus('üß™ Modo de teste ativado! Pressione os bot√µes do gamepad para testar.', 'info');
        this.debugLog('üß™ Iniciando teste do mapeamento', 'info');
        
        // Temporariamente ativar modo de teste
        this.isTestMode = true;
        
        // Mostrar mapeamento atual
        let mappingText = 'Mapeamento atual:\n';
        for (let color = 1; color <= 6; color++) {
            const colorName = this.getColorName(color);
            const gamepadButton = this.mapping[color];
            mappingText += `${colorName} ‚Üí Bot√£o ${gamepadButton}\n`;
        }
        this.debugLog(mappingText, 'info');
        
        // Desativar modo de teste ap√≥s 10 segundos
        setTimeout(() => {
            this.isTestMode = false;
            this.showStatus('‚úÖ Teste finalizado. Salve a configura√ß√£o se estiver correta.', 'success');
            this.debugLog('‚úÖ Teste do mapeamento finalizado', 'success');
        }, 10000);
    }
    
    saveMapping() {
        if (Object.keys(this.mapping).length !== 6) {
            this.showStatus('‚ùå Mapeie todos os 6 bot√µes antes de salvar!', 'error');
            this.debugLog('‚ùå Tentativa de salvar mapeamento incompleto', 'error');
            return;
        }
        
        try {
            localStorage.setItem('gamepadMapping', JSON.stringify(this.mapping));
            this.showStatus('‚úÖ Configura√ß√£o salva com sucesso! Voc√™ pode voltar ao jogo.', 'success');
            this.debugLog('‚úÖ Mapeamento salvo no localStorage', 'success');
            this.debugLog(`üì¶ Dados salvos: ${JSON.stringify(this.mapping)}`, 'info');
            
            // Mostrar resumo final
            let summary = 'Resumo da configura√ß√£o salva:\n';
            for (let color = 1; color <= 6; color++) {
                const colorName = this.getColorName(color);
                const gamepadButton = this.mapping[color];
                summary += `${colorName} (${color}) ‚Üí Gamepad bot√£o ${gamepadButton}\n`;
            }
            this.debugLog(summary, 'success');
            
        } catch (error) {
            this.showStatus('‚ùå Erro ao salvar configura√ß√£o!', 'error');
            this.debugLog(`‚ùå Erro ao salvar: ${error.message}`, 'error');
        }
    }
    
    resetMapping() {
        this.mapping = {};
        this.stopMapping();
        
        // Atualizar display
        for (let color = 1; color <= 6; color++) {
            this.updateButtonDisplay(color);
        }
        
        this.showStatus('üîÑ Configura√ß√£o resetada. Comece novamente.', 'info');
        this.debugLog('üîÑ Mapeamento resetado', 'info');
        
        document.getElementById('testBtn').disabled = true;
        document.getElementById('saveBtn').disabled = true;
    }
    
    loadExistingMapping() {
        try {
            const saved = localStorage.getItem('gamepadMapping');
            if (saved) {
                this.mapping = JSON.parse(saved);
                this.debugLog('üì¶ Mapeamento existente carregado', 'info');
                this.debugLog(`üì¶ Dados carregados: ${JSON.stringify(this.mapping)}`, 'info');
                
                // Atualizar display
                for (let color = 1; color <= 6; color++) {
                    this.updateButtonDisplay(color);
                }
                
                // Habilitar bot√µes se mapeamento completo
                if (Object.keys(this.mapping).length === 6) {
                    document.getElementById('testBtn').disabled = false;
                    document.getElementById('saveBtn').disabled = false;
                    this.showStatus('‚úÖ Configura√ß√£o anterior carregada. Voc√™ pode testar ou salvar novamente.', 'success');
                } else {
                    this.showStatus('‚ö†Ô∏è Configura√ß√£o parcial carregada. Complete o mapeamento.', 'warning');
                }
            } else {
                this.debugLog('üì¶ Nenhum mapeamento anterior encontrado', 'info');
            }
        } catch (error) {
            this.debugLog(`‚ùå Erro ao carregar mapeamento: ${error.message}`, 'error');
        }
    }
    
    getColorName(colorNumber) {
        const names = {
            1: 'Vermelho',
            2: 'Branco',
            3: '√Çmbar',
            4: 'Azul',
            5: 'Amarelo',
            6: 'Verde'
        };
        return names[colorNumber] || 'Desconhecido';
    }
    
    showStatus(message, type) {
        const statusElement = document.getElementById('statusMessage');
        statusElement.textContent = message;
        statusElement.className = `status-message ${type}`;
        statusElement.style.display = 'block';
        
        // Auto-esconder ap√≥s 5 segundos
        setTimeout(() => {
            statusElement.style.display = 'none';
        }, 5000);
    }
    
    debugLog(message, type = 'info') {
        const debugContainer = document.getElementById('debugLogs');
        const logElement = document.createElement('div');
        logElement.className = `debug-log ${type}`;
        
        const timestamp = new Date().toLocaleTimeString();
        logElement.textContent = `[${timestamp}] ${message}`;
        
        debugContainer.appendChild(logElement);
        
        // Manter apenas os √∫ltimos 50 logs
        while (debugContainer.children.length > 50) {
            debugContainer.removeChild(debugContainer.firstChild);
        }
        
        // Scroll para o final
        debugContainer.scrollTop = debugContainer.scrollHeight;
        
        // Tamb√©m logar no console do navegador
        console.log(`[GamepadConfig] ${message}`);
    }
}

// Inicializar quando a p√°gina carregar
document.addEventListener('DOMContentLoaded', () => {
    window.gamepadConfigurator = new GamepadConfigurator();
});
